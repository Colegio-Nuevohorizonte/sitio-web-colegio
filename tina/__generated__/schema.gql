# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  noticias(relativePath: String): Noticias!
  noticiasConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NoticiasFilter): NoticiasConnection!
}

input DocumentFilter {
  noticias: NoticiasFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Noticias | Folder

type Noticias implements Node & Document {
  titulo: String!
  fecha: String!
  categoria: String!
  imagen: String!
  resumen: String!
  destacada: Boolean
  autor: String!
  estado: String!
  contenido: JSON!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input NoticiasFilter {
  titulo: StringFilter
  fecha: DatetimeFilter
  categoria: StringFilter
  imagen: ImageFilter
  resumen: StringFilter
  destacada: BooleanFilter
  autor: StringFilter
  estado: StringFilter
  contenido: RichTextFilter
}

type NoticiasConnectionEdges {
  cursor: String!
  node: Noticias
}

type NoticiasConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NoticiasConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateNoticias(relativePath: String!, params: NoticiasMutation!): Noticias!
  createNoticias(relativePath: String!, params: NoticiasMutation!): Noticias!
}

input DocumentUpdateMutation {
  noticias: NoticiasMutation
  relativePath: String
}

input DocumentMutation {
  noticias: NoticiasMutation
}

input NoticiasMutation {
  titulo: String
  fecha: String
  categoria: String
  imagen: String
  resumen: String
  destacada: Boolean
  autor: String
  estado: String
  contenido: JSON
}

schema {
  query: Query
  mutation: Mutation
}
